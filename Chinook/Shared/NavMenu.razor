
@using Chinook.ClientModels
@using Chinook.Services.Interfaces
@using System.Security.Claims
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">

            <h3 class="px-3 text-white">Playlists</h3>
            <div class="nav-item px-3">
                @foreach (var playlistItem in PlaylistItems)
                {
                    <NavLink class="nav-link" @onclick="() => NavigateToPlaylist(playlistItem.PlaylistId)" Match="NavLinkMatch.All">
                        <span class="bi bi-music-note-list me-3" aria-hidden="true"></span>@playlistItem.Name
                    </NavLink>
                }
            </div>
        </div>

    </nav>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject]
    private IPlaylistService PlaylistService { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private List<Playlist> PlaylistItems = new List<Playlist>();
    private string CurrentUserId;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnParametersSetAsync()
    {
        CurrentUserId = await GetUserId();
        PlaylistItems = await PlaylistService.GetPlaylistsByUserIdAsync(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void NavigateToPlaylist(long playlistId)
    {
        NavigationManager.NavigateTo($"playlist/{playlistId}", true);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
