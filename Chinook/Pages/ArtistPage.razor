@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Helpers
@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@inject IArtistService ArtistService
@inject IPlaylistService PlaylistService

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @(new MarkupString(InfoMessage))
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        @if (Playlists != null)
        {
            <div class="mb-2">
                <label for="ExistingPlaylist">Add to existing playlist</label>
                <select class="form-control" id="ExistingPlaylist" @bind="SelectedPlaylist">
                    <option value="0"> -- Select Playlist -- </option>
                    @foreach (var playlist in Playlists)
                    {
                        <option @key=@playlist.PlaylistId value="@playlist.PlaylistId">@playlist.Name</option>
                    }
                </select>
                <p>Selected Playlist: @SelectedPlaylist</p>
            </div>

        }
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylistName" />
        </div>
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <div class="alert alert-danger fade show">
                <div class="d-flex align-items-start">
                    <div class="flex-grow-1">
                        @(new MarkupString(ErrorMessage))
                    </div>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private ClientModels.ArtistClientModel Artist;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string ErrorMessage;
    private string CurrentUserId;
    private List<ClientModels.Playlist> Playlists;
    private string NewPlaylistName;
    private long SelectedPlaylist;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            CurrentUserId = await GetUserId();
            Artist = await ArtistService.GetArtistByIdAsync(ArtistId);
            Tracks = await PlaylistService.GetTracksByArtistIdAsync(ArtistId, CurrentUserId);
            CloseErrorMessage();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task LoadPlaylists()
    {
        try
        {
            Playlists = await PlaylistService.GetPlaylistsByUserIdAsync(CurrentUserId);
            CloseErrorMessage();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        try
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            await PlaylistService.FavoriteTrackAsync(trackId, CurrentUserId);
            Tracks = await PlaylistService.GetTracksByArtistIdAsync(ArtistId, CurrentUserId);
            InfoMessage = MessageGenerator.GenerateAssignTrackInfoMessage(track, "Favorites");
            ErrorMessage = "";
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        try
        {
            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            await PlaylistService.UnfavoriteTrackAsync(trackId, CurrentUserId);
            Tracks = await PlaylistService.GetTracksByArtistIdAsync(ArtistId, CurrentUserId);
            InfoMessage = MessageGenerator.GenerateRemoveTrackInfoMessage(track, "Favorites");
            CloseErrorMessage();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

    private async Task OpenPlaylistDialog(long trackId)
    {
        await LoadPlaylists();
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();
        long playlistId = 0;
        try
        {
            if(SelectedPlaylist == 0)
            {
                if (!string.IsNullOrWhiteSpace(NewPlaylistName))
                {
                    playlistId = await PlaylistService.AddTrackToThePlaylist(SelectedTrack.TrackId, NewPlaylistName, CurrentUserId);
                }
                InfoMessage = MessageGenerator.GenerateNewPlaylistInfoMessage(SelectedTrack, NewPlaylistName, playlistId);
            }
            else
            {
                await PlaylistService.AddTrackToPlaylist(SelectedPlaylist, SelectedTrack.TrackId);
                var playlistName = Playlists.Find(x => x.PlaylistId == SelectedPlaylist)?.Name;
                InfoMessage = MessageGenerator.GenerateNewPlaylistInfoMessage(SelectedTrack, NewPlaylistName, playlistId);
            }
            PlaylistDialog.Close();
            CloseErrorMessage();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }       
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private void CloseErrorMessage()
    {
        ErrorMessage = "";
    }
}