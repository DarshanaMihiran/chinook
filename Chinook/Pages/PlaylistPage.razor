@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Common
@using Chinook.Helpers
@using Chinook.Models
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@inherits BaseComponent
@inject IPlaylistService PlaylistService

<h1>Playlist <strong>@playlistName</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist?.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Error ErrorMessage="@ErrorMessage" />
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private Chinook.ClientModels.Playlist? Playlist;
    private string? CurrentUserId;
    private string? playlistName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUserId = await GetUserId() ?? throw new Exception("User not found");
            await InvokeAsync(StateHasChanged);

            Playlist = await PlaylistService.GetPlaylistById(PlaylistId, CurrentUserId);
            SetPlaylistName();

            CloseErrorMessage();
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task<string> GetUserId()
    {
        var user = await authenticationState;
        var userIdClaim = user.User.FindFirst(u => u.Type == ClaimTypes.NameIdentifier);
        var userId = userIdClaim?.Value;
        return userId ?? string.Empty;
    }

    private async Task FavoriteTrack(long trackId)
    {
        try
        {
            await UpdatePlaylistAfterAction(trackId, async () =>
            {
                await PlaylistService.FavoriteTrackAsync(trackId, CurrentUserId);
                InfoMessage = MessageGenerator.GenerateAssignTrackInfoMessage(GetTrack(trackId), "Favorites");
            });
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        try
        {
            await UpdatePlaylistAfterAction(trackId, async () =>
            {
                await PlaylistService.UnfavoriteTrackAsync(trackId, CurrentUserId);
                InfoMessage = MessageGenerator.GenerateRemoveTrackInfoMessage(GetTrack(trackId), "Favorites");
            });
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task UpdatePlaylistAfterAction(long trackId, Func<Task> action)
    {
        await action();
        Playlist = await PlaylistService.GetPlaylistById(PlaylistId, CurrentUserId);
        CloseErrorMessage();
    }

    private async Task RemoveTrack(long trackId)
    {
        try
        {
            await UpdatePlaylistAfterAction(trackId, async () =>
            {
                var track = GetTrack(trackId);
                await PlaylistService.RemoveTrackFromPlaylist(trackId, PlaylistId);
                InfoMessage = MessageGenerator.GenerateRemoveTrackInfoMessage(track, Playlist.Name);
            });
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private PlaylistTrack GetTrack(long trackId)
    {
        return Playlist?.Tracks?.FirstOrDefault(t => t.TrackId == trackId) ?? throw new Exception("track not found");
    }

    private void SetPlaylistName()
    {
        playlistName = Playlist?.Name == "Favorites" ? "My Favorite Tracks" : Playlist?.Name;
    }
}
