@page "/"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Models
@using Chinook.Services
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore

@inject IArtistService ArtistsService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

<div class="form-group">
    <input type="text" class="form-control" placeholder="Search artist..." @bind="searchTerm" @oninput="SearchArtists" />
</div>

@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistClientModel>? Artists;
    private string searchTerm;

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<ArtistClientModel>> GetArtists()
    {
        return await ArtistsService.GetArtistsAsync();
    }

    public async Task<List<AlbumClientModel>> GetAlbumsForArtist(int artistId)
    {
        return await ArtistsService.GetAlbumsByArtistIdAsync(artistId);
    }

    private async Task SearchArtists(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            Artists = await ArtistsService.GetArtistsBySearchAsync(searchTerm);
        }
        else
        {
            Artists = await GetArtists();
        }
    }
}
